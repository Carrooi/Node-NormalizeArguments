// Generated by CoffeeScript 1.6.3
(function() {
  var any, args, array, boolean, count, emptyArgument, expandArguments, fn, isFunction, normalizeArguments, number, object, string, type, types;

  types = {
    string: '[object String]',
    number: '[object Number]',
    boolean: '[object Boolean]',
    array: '[object Array]',
    object: '[object Object]',
    fn: '[object Function]'
  };

  string = function(d) {
    return {
      type: 'string',
      d: d
    };
  };

  number = function(d) {
    return {
      type: 'number',
      d: d
    };
  };

  boolean = function(d) {
    return {
      type: 'boolean',
      d: d
    };
  };

  array = function(d) {
    return {
      type: 'array',
      d: d
    };
  };

  object = function(d) {
    return {
      type: 'object',
      d: d
    };
  };

  any = function(d) {
    return {
      type: 'any',
      d: d
    };
  };

  fn = function(d) {
    return {
      type: 'fn',
      d: d
    };
  };

  emptyArgument = {};

  type = Object.prototype.toString;

  isFunction = function(v) {
    return type.call(v) === '[object Function]';
  };

  count = function(num) {
    switch (num) {
      case 1:
        return 'st';
      case 2:
        return 'nd';
      case 3:
        return 'rd';
      default:
        return 'th';
    }
  };

  expandArguments = function(params, expected) {
    var e, i, _i, _len;
    if (params == null) {
      params = [];
    }
    if (expected == null) {
      expected = [];
    }
    for (i = _i = 0, _len = expected.length; _i < _len; i = ++_i) {
      e = expected[i];
      if (isFunction(e)) {
        e = e();
      }
      if (e.type !== 'any' && types[e.type] !== type.call(params[i])) {
        params.splice(i, 0, emptyArgument);
      }
    }
    return params;
  };

  normalizeArguments = function(params) {
    var i, param, result;
    result = [];
    for (i in params) {
      param = params[i];
      result.push(param);
    }
    return result;
  };

  args = function(params, expected) {
    var expect, i, num, param, _i, _len;
    if (params == null) {
      params = [];
    }
    if (expected == null) {
      expected = [];
    }
    if (type.call(params) !== '[object Array]') {
      params = normalizeArguments(params);
    }
    params = expandArguments(params, expected);
    for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
      param = params[i];
      expect = null;
      if (typeof expected[i] !== 'undefined') {
        expect = isFunction(expected[i]) ? expected[i]().type : expected[i].type;
      }
      if (param === emptyArgument) {
        if (isFunction(expected[i])) {
          num = i + 1;
          throw new Error(num + count(num) + ' argument must be ' + expected[i]().type);
        }
        params[i] = expected[i].d;
      }
    }
    return params;
  };

  args.string = string;

  args.number = number;

  args.boolean = boolean;

  args.array = array;

  args.object = object;

  args.any = any;

  args.fn = fn;

  module.exports = args;

}).call(this);
