// Generated by CoffeeScript 1.6.3
(function() {
  var args, count, emptyArgument, expandArguments, exportFunc, fn, isFunction, name, normalizeArguments, type, types;

  types = {
    string: '[object String]',
    number: '[object Number]',
    'boolean': '[object Boolean]',
    array: '[object Array]',
    object: '[object Object]',
    fn: '[object Function]'
  };

  exportFunc = {
    string: function(d) {
      return {
        type: 'string',
        d: d
      };
    },
    number: function(d) {
      return {
        type: 'number',
        d: d
      };
    },
    'boolean': function(d) {
      return {
        type: 'boolean',
        d: d
      };
    },
    array: function(d) {
      return {
        type: 'array',
        d: d
      };
    },
    object: function(d) {
      return {
        type: 'object',
        d: d
      };
    },
    any: function(d) {
      return {
        type: 'any',
        d: d
      };
    },
    fn: function(d) {
      return {
        type: 'fn',
        d: d
      };
    },
    oneOf: function(list, d) {
      var i, readable, t, type, _i, _len;
      if (d == null) {
        d = null;
      }
      readable = [];
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        type = list[i];
        t = type().type;
        list[i] = types[t];
        readable.push(t);
      }
      return {
        type: 'oneOf',
        d: d,
        dCalled: arguments.length === 2,
        types: list,
        readable: readable
      };
    }
  };

  emptyArgument = {};

  type = Object.prototype.toString;

  isFunction = function(v) {
    return type.call(v) === '[object Function]';
  };

  count = function(num) {
    switch (num) {
      case 1:
        return 'st';
      case 2:
        return 'nd';
      case 3:
        return 'rd';
      default:
        return 'th';
    }
  };

  expandArguments = function(params, expected) {
    var actual, e, i, _i, _len;
    if (params == null) {
      params = [];
    }
    if (expected == null) {
      expected = [];
    }
    for (i = _i = 0, _len = expected.length; _i < _len; i = ++_i) {
      e = expected[i];
      if (isFunction(e)) {
        e = e();
      }
      actual = type.call(params[i]);
      if (params[i] !== null && e.type !== 'any' && ((e.type === 'oneOf' && e.types.indexOf(actual) === -1) || (e.type !== 'oneOf' && types[e.type] !== actual))) {
        params.splice(i, 0, emptyArgument);
      }
    }
    return params;
  };

  normalizeArguments = function(params) {
    var i, param, result;
    result = [];
    for (i in params) {
      param = params[i];
      result.push(param);
    }
    return result;
  };

  args = function(params, expected) {
    var e, expect, fn, i, last, must, num, param, _i, _len;
    if (params == null) {
      params = [];
    }
    if (expected == null) {
      expected = [];
    }
    if (type.call(params) !== '[object Array]') {
      params = normalizeArguments(params);
    }
    params = expandArguments(params, expected);
    for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
      param = params[i];
      expect = null;
      e = expected[i];
      if (typeof e !== 'undefined') {
        expect = isFunction(e) ? e().type : e.type;
      }
      if (param === emptyArgument) {
        fn = isFunction(e);
        if (fn || (!fn && e.type === 'oneOf' && e.dCalled === false)) {
          if (fn) {
            must = e().type;
          } else {
            if (e.readable.length === 1) {
              must = e.readable[0];
            } else {
              last = e.readable.pop();
              must = e.readable.join(', ') + ' or ' + last;
            }
          }
          num = i + 1;
          throw new Error(num + count(num) + ' argument must be ' + must);
        }
        params[i] = e.d;
      }
    }
    return params;
  };

  for (name in exportFunc) {
    fn = exportFunc[name];
    args[name] = fn;
  }

  module.exports = args;

}).call(this);
