(function() {
	var __r__c__ = this;
	/** Generated by SimQ **/
	/** modules **/
	
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var SUPPORTED, arrayIndexOf, cache, creating, modules, require, resolve, stats;
	
	  if (!this.require) {
	    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
	    modules = {};
	    stats = {};
	    cache = {};
	    creating = [];
	    require = function(name, parent) {
	      var fullName, m;
	      if (parent == null) {
	        parent = null;
	      }
	      fullName = resolve(name, parent);
	      if (typeof cache[fullName] === 'undefined') {
	        m = {
	          exports: {},
	          id: fullName,
	          filename: fullName,
	          loaded: false,
	          parent: null,
	          children: null
	        };
	        if (arrayIndexOf(creating, fullName) === -1) {
	          creating.push(fullName);
	          modules[fullName].apply(window, [m.exports, m]);
	          creating.splice(arrayIndexOf(creating, fullName));
	          cache[fullName] = m;
	        }
	        m.loaded = true;
	      } else {
	        m = cache[fullName];
	      }
	      if (typeof stats[fullName] === 'undefined') {
	        stats[fullName] = {
	          atime: null,
	          mtime: null,
	          ctime: null
	        };
	      }
	      stats[fullName].atime = new Date;
	      return m.exports;
	    };
	    resolve = function(name, parent) {
	      var ext, num, original, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
	      if (parent == null) {
	        parent = null;
	      }
	      original = name;
	      if (parent !== null && name[0] === '.') {
	        num = parent.lastIndexOf('/');
	        if (num !== -1) {
	          parent = parent.substr(0, num);
	        }
	        name = parent + '/' + name;
	      }
	      parts = name.split('/');
	      result = [];
	      prev = null;
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (part === '.' || part === '') {
	          continue;
	        } else if (part === '..' && prev) {
	          result.pop();
	        } else {
	          result.push(part);
	        }
	        prev = part;
	      }
	      name = result.join('/');
	      if ((original[0] === '/') || (parent !== null && parent[0] === '/' && original[0] === '.')) {
	        name = '/' + name;
	      }
	      if (typeof modules[name] !== 'undefined') {
	        return name;
	      }
	      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
	        ext = SUPPORTED[_j];
	        if (typeof modules[name + '.' + ext] !== 'undefined') {
	          return name + '.' + ext;
	        }
	      }
	      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
	        ext = SUPPORTED[_k];
	        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
	          return name + '/index.' + ext;
	        }
	      }
	      throw new Error("Module " + original + " was not found.");
	    };
	    arrayIndexOf = function(array, search) {
	      var element, i, _i, _len;
	      if (typeof Array.prototype.indexOf !== 'undefined') {
	        return array.indexOf(search);
	      }
	      if (array.length === 0) {
	        return -1;
	      }
	      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
	        element = array[i];
	        if (element === search) {
	          return i;
	        }
	      }
	      return -1;
	    };
	    this.require = function(name, parent) {
	      if (parent == null) {
	        parent = null;
	      }
	      return require(name, parent);
	    };
	    this.require.simq = true;
	    this.require.version = 1;
	    this.require.resolve = function(name, parent) {
	      if (parent == null) {
	        parent = null;
	      }
	      return resolve(name, parent);
	    };
	    this.require.define = function(bundleOrName, obj) {
	      var m, name, _results;
	      if (obj == null) {
	        obj = null;
	      }
	      if (typeof bundleOrName === 'string') {
	        return modules[bundleOrName] = obj;
	      } else {
	        _results = [];
	        for (name in bundleOrName) {
	          m = bundleOrName[name];
	          _results.push(modules[name] = m);
	        }
	        return _results;
	      }
	    };
	    this.require.release = function() {
	      var name, _results;
	      _results = [];
	      for (name in cache) {
	        _results.push(delete cache[name]);
	      }
	      return _results;
	    };
	    this.require.getStats = function(name, parent) {
	      var fullName;
	      if (parent == null) {
	        parent = null;
	      }
	      fullName = resolve(name, parent);
	      if (fullName === null) {
	        throw new Error('Module ' + name + ' was not found.');
	      }
	      if (typeof stats[fullName] === 'undefined') {
	        stats[fullName] = {
	          atime: null,
	          mtime: null,
	          ctime: null
	        };
	      }
	      return stats[fullName];
	    };
	    this.require.__setStats = function(bundle) {
	      var data, name, _results;
	      _results = [];
	      for (name in bundle) {
	        data = bundle[name];
	        _results.push(stats[name] = {
	          atime: new Date(data.atime),
	          mtime: new Date(data.mtime),
	          ctime: new Date(data.ctime)
	        });
	      }
	      return _results;
	    };
	    this.require.cache = cache;
	  }
	
	  return this.require.define;
	
	}).call(this)({
	 '/tests/Args.coffee': function(exports, module) {
	
		/** node globals **/
		var require = function(name) {return __r__c__.require(name, '/tests/Args.coffee');};
		require.resolve = function(name, parent) {if (parent === null) {parent = '/tests/Args.coffee';} return __r__c__.require.resolve(name, parent);};
		require.define = function(bundle) {__r__c__.require.define(bundle);};
		require.cache = __r__c__.require.cache;
		var __filename = '/tests/Args.coffee';
		var __dirname = '/tests';
		var process = {cwd: function() {return '/';}, argv: ['node', '/tests/Args.coffee'], env: {}};
	
		/** code **/
		(function() {
		  var args;
		
		  args = window.normalizeArguments;
		
		  describe('Args', function() {
		    it('should return empty array', function() {
		      return expect(args()).to.be.eql([]);
		    });
		    it('should throw an error if required argument is missing', function() {
		      return expect(function() {
		        return args([], [args.number]);
		      }).to["throw"](Error);
		    });
		    it('should throw an error if argument is not of the right type', function() {
		      return expect(function() {
		        return args([1], [args.string]);
		      }).to["throw"](Error);
		    });
		    it('should pass default value for one argument', function() {
		      return expect(args([], [args.number(1)])).to.be.eql([1]);
		    });
		    it('should let pass any argument', function() {
		      var date;
		      date = new Date;
		      return expect(args([date], [args.any])).to.be.eql([date]);
		    });
		    it('should pass default value with other arguments', function() {
		      return expect(args([1], [args.number, args.string('test')])).to.be.eql([1, 'test']);
		    });
		    it('should pass arguments like in first example of doc', function() {
		      var fn;
		      fn = function(list, count, data, base) {
		        return args(arguments, [args.object, args.number(null), args.object({}), args.string(null)]);
		      };
		      return expect(fn({}, 'and base argument')).to.be.eql([{}, null, {}, 'and base argument']);
		    });
		    it('should pass default values for advanced options', function() {
		      expect(args([1, 'one', true], [args.number, args.boolean(false), args.string, args.boolean])).to.be.eql([1, false, 'one', true]);
		      expect(args(['one'], [args.object({}), args.string])).to.be.eql([{}, 'one']);
		      return expect(args(['one', 2, 'three', 4], [args.string])).to.be.eql(['one', 2, 'three', 4]);
		    });
		    it('should let arguments as they are with null arguments in it', function() {
		      var params;
		      params = [
		        'message', null, {
		          arg: 'arg'
		        }
		      ];
		      return expect(args(params, [args.string, args.number(null), args.object({})])).to.be.eql(params);
		    });
		    it('should pass arguments for oneOf options', function() {
		      return expect(args([[2, 3]], [args.number(1), args.oneOf([args.array, args.object])])).to.be.eql([1, [2, 3]]);
		    });
		    it('should throw an error if argument is not in oneOf', function() {
		      return expect(function() {
		        return args(['test'], [args.oneOf([args.array, args.object])]);
		      }).to["throw"](Error);
		    });
		    return it('should set default argument for oneOf option', function() {
		      return expect(args([2], [args.oneOf([args.array, args.object], {})])).to.be.eql([{}, 2]);
		    });
		  });
		
		}).call(this);
		
	
	}
	});
	__r__c__.require.version = '5.6.3';
	
	window.require = __r__c__.require;
	
	/** run section **/
	
	/** /tests/Args **/
	__r__c__.require('/tests/Args');
}).call({});